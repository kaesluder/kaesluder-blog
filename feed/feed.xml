<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Blog Title</title>
  <subtitle>This is a longer description about your blog.</subtitle>
  <link href="https://example.com/kaesluder-blog/feed/feed.xml" rel="self" />
  <link href="https://example.com/kaesluder-blog/" />
  <updated>2025-08-03T00:00:00Z</updated>
  <id>https://example.com/kaesluder-blog/</id>
  <author>
    <name>Your Name</name>
  </author>
  <entry>
    <title>3 August 2025: Documentation Wishlist</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-08-03-doc-wishlist/" />
    <updated>2025-08-03T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-08-03-doc-wishlist/</id>
    <content type="html">&lt;h2 id=&quot;documentation-wishlist&quot;&gt;Documentation Wishlist&lt;/h2&gt;
&lt;p&gt;Most of these are things I had to reverse engineer refactoring a wizard component. And I&#39;ll probably forget all of this in six months when I&#39;m asked to do a bugfix.&lt;/p&gt;
&lt;h3 id=&quot;module-level-readme-md&quot;&gt;Module Level (README.md)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are the UI frameworks and dependencies, and where can I find documentation?&lt;/li&gt;
&lt;li&gt;What are the build requirements and process?&lt;/li&gt;
&lt;li&gt;What are needed environment variables?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;linked-components-readme-folder-md&quot;&gt;Linked Components (README.folder.md)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What is the goal or task?&lt;/li&gt;
&lt;li&gt;Is there a component hierarchy? What is it?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Description: What is the business/ui purpose of this function?&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Return values&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Side effects/state changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;august-goals&quot;&gt;August Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get a deeper understanding of how JavaScript handles fundamental variables and functions.&lt;/li&gt;
&lt;li&gt;Continue learning Czech.&lt;/li&gt;
&lt;li&gt;Finish bell hooks, &lt;em&gt;All About Love&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>20 July 2025: Home Music Server Setup</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-07-20-home-audio-server/" />
    <updated>2025-07-20T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-07-20-home-audio-server/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9iJQQTg5_Kg?si=0_bZniuXGMVmfrEG&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Prepping for a move in October and working on digitizing old cds and setting up a backup server. Not creative work but productive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 4 running &lt;a href=&quot;https://www.raspberrypi.com/software/operating-systems/&quot;&gt;Raspberry Pi OS&lt;/a&gt;. The Pi was left over from another project a few years ago. Setting it up for headless operation was pretty easy following instructions. Using an external HDD and an enclosure, also from an earlier project.&lt;/li&gt;
&lt;li&gt;Basic &lt;a href=&quot;https://ubuntu.com/tutorials/install-and-configure-samba&quot;&gt;Samba&lt;/a&gt; setup with a &lt;code&gt;Music&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.navidrome.org/&quot;&gt;Navidrome&lt;/a&gt; music server.&lt;/li&gt;
&lt;li&gt;Ripping: &lt;a href=&quot;http://littlesvr.ca/asunder/&quot;&gt;Asunder&lt;/a&gt; and &lt;a href=&quot;https://picard.musicbrainz.org/&quot;&gt;Musicbrainz Picard&lt;/a&gt; for tagging/organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A goal is to move away from depending on streaming services to personal music curation. Some of the discoveries from the archives include some independently published local music by hometown bands like &lt;a href=&quot;https://www.salaamband.com/&quot;&gt;Salaam&lt;/a&gt; and a Live From Bloomington project I&#39;ve not found on the internet. Also discovering CDs I didn&#39;t know we had, like three Beatles collections and a Siouxsie and the Banshees single.&lt;/p&gt;
&lt;p&gt;I started a practice in spring of putting notable songs on a year playlist. It just crossed 100 songs:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/2046291804&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true&quot;&gt;&lt;/iframe&gt;&lt;div style=&quot;font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;&quot;&gt;&lt;a href=&quot;https://soundcloud.com/kae-sluder&quot; title=&quot;Kae Sluder&quot; target=&quot;_blank&quot; style=&quot;color: #cccccc; text-decoration: none;&quot;&gt;Kae Sluder&lt;/a&gt; Â· &lt;a href=&quot;https://soundcloud.com/kae-sluder/sets/2025-daily&quot; title=&quot;2025 Daily&quot; target=&quot;_blank&quot; style=&quot;color: #cccccc; text-decoration: none;&quot;&gt;2025 Daily&lt;/a&gt;&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>13 July 2025: Vitest Mocking</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-07-13-mocking-js/" />
    <updated>2025-07-13T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-07-13-mocking-js/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZKCGilFFFPk?si=KzYO6xsQ8G_Uemka&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Some notes on vitest after working out a few things. Needed to look beyond the cookbook examples to why vitest and jest mocks work.&lt;/p&gt;
&lt;h3 id=&quot;modules-are-objects&quot;&gt;Modules are objects&lt;/h3&gt;
&lt;p&gt;Modules can be structured as objects with method variables. A simple module with one function (not complete):&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// /src/mosaicUtils.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mosaicFetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/mosaic/index.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imageList&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; imageList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can be mocked as:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// App.test.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; exampleData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;15th_century_egyptian_anatomy_of_horse.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;163_of_&#39;Five_Years_in_Siam_from_1891_to_1896_..._With_maps_and_illustrations_by_the_author&#39;_(11249062174).jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;640px-Avon_Fantasy_Reader_8.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Argument 1: source of the old module&lt;/span&gt;
vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;../src/mosaicUtils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// set up the mock function to return the data&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockMosaicFetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; exampleData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// return a new module&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    mosaicFetch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mockMosaicFetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vi-mock-and-vitest-replace-the-old-module&quot;&gt;&lt;code&gt;vi.mock()&lt;/code&gt; and vitest &amp;quot;replace&amp;quot; the old module&lt;/h2&gt;
&lt;p&gt;The utility library is imported with:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; mosaicFetch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../src/mosaicUtils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vitest intercepts this import call and replaces the entire module, not just mosaicFetch.&lt;/p&gt;
&lt;h2 id=&quot;mocking-one-or-some-objects-in-a-module&quot;&gt;Mocking one or some objects in a module&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vi.mock()&lt;/code&gt; replaces the entire module, not just a single function. Use &lt;code&gt;vi.importActual(&lt;/code&gt;sourceFile`) to include other objects without modification.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// from https://vitest.dev/api/vi.html#vi-importactual&lt;/span&gt;
vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./example.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originalModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;importActual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./example.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; get&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vi-spyon-watches-a-single-method-getter-or-setter&quot;&gt;&lt;code&gt;vi.spyOn()&lt;/code&gt; watches a &lt;em&gt;single&lt;/em&gt; method, getter or setter&lt;/h2&gt;
&lt;p&gt;A spy can be used to watch a single function in a module with optional replacement. See &lt;a href=&quot;https://vitest.dev/api/vi.html#vi-spyon&quot;&gt;documentation&lt;/a&gt;.
The same mock can be made as:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; mosaicUtils &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../src/mosaicUtils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

vi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mosaicUtils&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mosaicFetch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; exampleData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, spyOn can be used to count how many times the existing function is called during the test.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>5 July 2025: Strudel, New Role, and Mermaid Diagrams in Eleventy</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-07-05-strudel-4th/" />
    <updated>2025-07-05T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-07-05-strudel-4th/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9ivqFkLYxp8?si=nmCMHwGYycWJhFhw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;strudel-learning-to-understand-cat-seq-and-stack&quot;&gt;Strudel: Learning to Understand cat, seq, and stack&lt;/h2&gt;
&lt;p&gt;I&#39;ve been experimenting with music programming languages. This week it&#39;s been &lt;a href=&quot;https://strudel.cc/&quot;&gt;strudel&lt;/a&gt; which is built around the concept of a cycleâtypically either a measure or a beat in most music notation.&lt;/p&gt;
&lt;p&gt;Strudel interprets strings that represent sequences of notes, drumbeats, or other events. &amp;quot;c4 e4 g4&amp;quot; plays three notes of a c-major chord. But a tricky matter is determining how the notes should be interpreted. Does that fit in one cycle (fast) or three cycles (slow)? After a fair bit of frustration, I learned the following concepts for strudel. Something that tripped me up here was that the Strudel docs teach the abbreviated notation first.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; (&lt;code&gt;&amp;quot;&amp;lt;c4 e4 g4&amp;gt;&amp;quot;&lt;/code&gt;): treats each item in the list as a separate cycle. This can be used to create extended phrases or songs. This is also known as &lt;code&gt;slowcat&lt;/code&gt; if you&#39;re using the long notation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt; (&lt;code&gt;&amp;quot;c4 e4 g4&amp;quot;&lt;/code&gt;): processes each item in the list inside one cycle. This is used to push notes inside a measure. (Also known as &lt;code&gt;fastcat&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; (&lt;code&gt;&amp;quot;c4, e4, g4&amp;quot;&lt;/code&gt;): process each event in parallel and at the same time. Used for chords, but also having multiple instruments playing together.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Patterns can be nested inside each other. The example below is a simple Strauss waltz loop that consists of four sequences &lt;code&gt;[bd rim rim]&lt;/code&gt; inside a cat &lt;code&gt;&amp;lt;[bd rim rim] ...&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;iframe src=&quot;https://strudel.cc/#c2V0Y3BtKDE4MC8zKQpzb3VuZCgiPFtiZCByaW0gcmltXSBbYmQgcmltIHJpbV0gW2JkIHJpbSByaW1dIFtyaW0gfiB%2BXT4iKQo%3D&quot; width=&quot;600&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Here&#39;s the logic in flowchart form.&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
flowchart TD
    Start[&quot;I want to play notes...&quot;]
    Choice1{&quot;... at the same time?&quot;}
    Stack[&quot;stack&quot;]
    Choice2{&quot;... over multiple cycles?&quot;}
    Cat[&quot;cat&quot;]
    Seq[&quot;seq&quot;]

    Start --&gt; Choice1
    Choice1 -- Yes --&gt; Stack
    Choice1 -- No --&gt; Choice2
    Choice2 -- Yes --&gt; Cat
    Choice2 -- No --&gt; Seq
&lt;/pre&gt;
&lt;h2 id=&quot;new-role&quot;&gt;New Role&lt;/h2&gt;
&lt;p&gt;Starting in October I&#39;ll transition from contract to full time software development at Prime Revenue focused on JS. It&#39;s been a four-year journey and I&#39;m very thankful for all the people at Ada Developer&#39;s Academy, Amazon, and Prime Revenue who have given me valuable support, advice, and learning opportunities.&lt;/p&gt;
&lt;h2 id=&quot;getting-mermaid-on-this-page&quot;&gt;Getting Mermaid on This Page&lt;/h2&gt;
&lt;p&gt;In the template &lt;code&gt;base.njk&lt;/code&gt;, add the code to load and run the mermaid api.&lt;/p&gt;
&lt;pre class=&quot;language-nunjucks&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-nunjucks&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;eleventy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;mermaid&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a paired shortcode in &lt;code&gt;eleventy.config.js&lt;/code&gt; to explicitly format the code block:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPairedShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mermaid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;pre class=&quot;mermaid&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/pre&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the shortcode to wrap the mermaid code in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block in the post markdown.&lt;/p&gt;
&lt;pre class=&quot;language-md&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;{% mermaid %}
flowchart TD
    Start[&quot;I want to play notes...&quot;]
    Choice1{&quot;... at the same time?&quot;}
    Stack[&quot;stack&quot;]
    Choice2{&quot;... over multiple cycles?&quot;}
    Cat[&quot;cat&quot;]
    Seq[&quot;seq&quot;]

&lt;span class=&quot;token code keyword&quot;&gt;    Start --&gt; Choice1
    Choice1 -- Yes --&gt; Stack
    Choice1 -- No --&gt; Choice2
    Choice2 -- Yes --&gt; Cat
    Choice2 -- No --&gt; Seq&lt;/span&gt;
{% endmermaid %}&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>28 June 2025: Shuffle and Backup</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-06-28-shuffle-and-backup/" />
    <updated>2025-06-28T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-06-28-shuffle-and-backup/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-CR628yT7aE?si=kFxctrIzZ27sry7c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;visual-card-shuffle&quot;&gt;Visual Card Shuffle&lt;/h2&gt;
&lt;p&gt;Continuing my exploration of &lt;a href=&quot;https://example.com/kaesluder-blog/posts/cut-ups-krell/&quot;&gt;cut-ups&lt;/a&gt; my sourcing interesting images from Wikimedia Commons and the Met Open Access collection. Then I shuffle the images and arrange nine of them on a grid:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://example.com/kaesluder-blog/blog/2025-06-28-shuffle-and-backup/ssn3u3mX8W-834.avif 834w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://example.com/kaesluder-blog/blog/2025-06-28-shuffle-and-backup/ssn3u3mX8W-834.webp 834w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://example.com/kaesluder-blog/blog/2025-06-28-shuffle-and-backup/ssn3u3mX8W-834.png&quot; alt=&quot;screenshot of web interface with photo tiles arranged in a 3 by 3 grid&quot; width=&quot;834&quot; height=&quot;721&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Pain points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image manipulation in css: My original idea was to use css to zoom in on random sections of each image, hoping for some creative serendipity. After an evening struggling with this. I gave up and started curating square tiles manually. The result is a bit creatively more satisfying, and it&#39;s a nice easy low-bandwidth task.&lt;/li&gt;
&lt;li&gt;Typescript: Kept getting warnings on a helper function that returns a JSX.Element type. Documentation on how to deal with it is inconsistent. Is it handled automatically by a vite setting (and if so, why is it being flagged)? Basic conclusion is that I need to learn a lot more about how to work with Typescript before picking it up for projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In-page documentation&lt;/li&gt;
&lt;li&gt;A keep-and-draw mechanic with limited keeps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;backups&quot;&gt;Backups&lt;/h2&gt;
&lt;p&gt;A few months ago the disk that had my only copy of multiple desktop backup failed. My thought process in procrastinating on new backups was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Essential work is on github&lt;/li&gt;
&lt;li&gt;Most of those backups were ephemera&lt;/li&gt;
&lt;li&gt;I rarely re-read books&lt;/li&gt;
&lt;li&gt;I&#39;ve not looked at that stuff in a while&lt;/li&gt;
&lt;li&gt;Well crap, my sewing patterns are gone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point pushed me to set up backups on the Thinkpad T420 I mentioned earlier as a backup system. It was mostly easy sailing once I specified full paths and set up my ssh keys. I used the Pika front end for BackupBorg to make everything work.&lt;/p&gt;
&lt;h2 id=&quot;reading-quote&quot;&gt;Reading Quote&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking responsibility does not mean that we deny the reality of institutional injustice. For example, racism, sexism, and homophobia all create barriers and concrete instances of discrimination. Simply taking responsibility does not mean we can prevent discriminatory acts from happening. But we can choose how we respond to acts of injustice. Taking responsibility means that in the face of barriers we still have the capacity to invent our lives, to shape our destinies in ways that maximize our well-being. Every day we practice this shape shifting to cope with realities we cannot easily change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bell hooks, &amp;quot;All About Love,&amp;quot; Chapter 4&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>21 June 2025: Roundup: Speeding up linux disk decryption, share topics, reflections, games</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-06-21-zed-and-other-tricks/" />
    <updated>2025-06-21T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-06-21-zed-and-other-tricks/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0FyLcHxbSRk?si=qAEMAohBM02byDmk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;playing-with-manjaro&quot;&gt;Playing with Manjaro&lt;/h2&gt;
&lt;p&gt;Working (again) on making an older Thinkpad T420 (2011) useful for home surfing and light development. Trying out &lt;a href=&quot;https://manjaro.org/&quot;&gt; Manjaro &lt;/a&gt; for now because with hardware this old I&#39;ve run into issue with immutable systems like &lt;a href=&quot;https://fedoraproject.org/atomic-desktops/&quot;&gt;Fedora Atomic&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;tweaking-full-disk-encryption&quot;&gt;Tweaking full-disk encryption&lt;/h3&gt;
&lt;p&gt;Full-disk encryption defaults can be unbearably slow for unlocking (over 1 minute) on this machine. Unlocking happens early during the boot process before the system has access to crypto hardware. I tweaked this using the following to set the number of iterations to a lower value. Dropping from 1,500,000 to 10,000 combined with a high-entropy passphrase is hopefully good enough for the need:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; cryptsetup luksChangeKey --pbkdf-force-iterations &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt; --key-slot &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; /dev/sda1

&lt;span class=&quot;token comment&quot;&gt;# check key creation&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; cryptsetup luksDump /dev/sda1

&lt;span class=&quot;token comment&quot;&gt;# remove old key&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; cryptsetup luksKillKey /dev/sda1 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As always, double-check device ids and RTFM before making changes.&lt;/p&gt;
&lt;h2 id=&quot;tools-show-and-share&quot;&gt;Tools Show and Share&lt;/h2&gt;
&lt;p&gt;Working on a show-and-share featuring the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zed.dev/&quot;&gt;Zed Editor&lt;/a&gt;: Fast editor written in rust.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sigoden/aichat&quot;&gt;aichat&lt;/a&gt;: Command line LLM client. Good for working through tricky bash and git options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;challenges-of-the-week&quot;&gt;Challenges of the Week&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adapting a legacy web component to read a new data spec as part of our plaid integration. So far it&#39;s mostly understanding the old data structure and renaming fields so that everything (hopefully) works.&lt;/li&gt;
&lt;li&gt;Translation tags for a feature I&#39;ve been working on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;games&quot;&gt;Games&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Started a playthrough of &lt;a href=&quot;https://altersthegame.com/&quot;&gt;The Alters&lt;/a&gt;. This is similar to the 1996 movie &lt;a href=&quot;https://www.imdb.com/title/tt0117108/&quot;&gt;Multiplicity&lt;/a&gt; where a stressed-out husband clones himself multiple times. &lt;em&gt;The Alters&lt;/em&gt; is a base-building survival game centered around Jan, a construction expert. Fortunately, he has weird science to clone himself multiple times, giving each clone fake memories of the training and skills he lacks. Unfortunately, each clone has survived a different set of challenges and traumas. As is frequently the case in survival scifi, your biggest challenge is yourself.&lt;/li&gt;
&lt;li&gt;Backed &lt;a href=&quot;https://www.kickstarter.com/projects/hecticelectron/defy-the-gods-rpg&quot;&gt;Defy the Gods&lt;/a&gt;, a mesopotamian-themed TTRPG.&lt;/li&gt;
&lt;li&gt;Picked up &lt;a href=&quot;https://modiphius.net/en-us/pages/homeworld&quot;&gt;Homeworld: Revelations&lt;/a&gt;, because I&#39;ve never been quite able to get the CRPG to run.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>14 June 2025: Cut-Ups, Simplified Krell Patch</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-06-14-cut-ups-krell/" />
    <updated>2025-06-14T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-06-14-cut-ups-krell/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UrfFHzqGBZI?si=fEakddz0v1WR7Epk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;cut-ups-and-solo-ttrpg-play&quot;&gt;Cut-Ups and Solo TTRPG Play&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.forbes.com/sites/robwieland/2023/11/25/now-is-a-great-time-to-check-out-solo-roleplaying/&quot;&gt;Solo Roleplaying&lt;/a&gt; combines elements of traditional tabletop RPGs like &lt;em&gt;Dungeons and Dragons,&lt;/em&gt; creative journaling, and the use of divination oracles as a means for brainstroming and reflection. The games use oracles such as random dice tables, tarot, or playing cards to create an element of challenge and surpise usually provided by gamemasters or (in the case of computer-rpgs) game-design teams.&lt;/p&gt;
&lt;p&gt;Lately I&#39;ve been experimenting with &lt;a href=&quot;https://en.wikipedia.org/wiki/Cut-up_technique&quot;&gt;cut-up techniques&lt;/a&gt; as a way to drive scenes and plot developments. a more direct TTRPG implementation is included in the &lt;a href=&quot;https://www.drivethrurpg.com/en/product/319632/tilt-an-oracle-for-solo-roleplaying&quot;&gt;Tilt: An oracle for solo roleplaying&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primarily I&#39;ve been using song lyrics because poetry offers a high level of imagery per word. The process I use involves the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collection&lt;/li&gt;
&lt;li&gt;Curation&lt;/li&gt;
&lt;li&gt;Random Draws&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Collection: Pulling text from sources that match the overall theme of the current game. In the example below, I started with music that felt personally and/or politically apocalyptic (even if the song isn&#39;t necessarily science fiction themed). After a few trials, I added in some additional texts to fill in some missing pieces (in this case, &amp;quot;Building Steam with a Grain of Salt,&amp;quot; &amp;quot;Not,&amp;quot; and &amp;quot;Many Moons&amp;quot;). These get copied into a markdown file with source citations at the top and lyrics below.&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;#&lt;/span&gt; music for scifi game&lt;/span&gt;

&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;##&lt;/span&gt; Sources&lt;/span&gt;

&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; St. Vincent, &quot;Los Ageless&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Beast in Black, &quot;Moonlight Rendezvous&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Reliqa, &quot;E.O.D.&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Reliqa, &quot;Cold World&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Frozen Crown, &quot;I am the Tyrant&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Rolling Stones, &quot;Paint it Black&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; DJ Shadow, &quot;Building Steam with a Grain of Salt&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Patti Smith (orig Springsteen), &quot;Because the Night&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Leonard Cohen, &quot;You Want it Darker&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Big Thief, &quot;Not&quot;
&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Janelle Monae, &quot;Many Moons&quot;

&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;##&lt;/span&gt; Text&lt;/span&gt;

In Los Ageless,
the winter never comes
the mothers milk their young
But I can keep running
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Curation: I edit down the original text to get rid of repeated lines. I also break up lines to get a single idea per line,&lt;/p&gt;
&lt;p&gt;Random Draws: I use the simple unix command line &lt;code&gt;tail -n +18 music_scifi.md | shuf | head -n 15&lt;/code&gt;. (Remove the first 18 lines (sources), shuffle all the lines, take the first 15 lines.)&lt;/p&gt;
&lt;p&gt;Editing: Further edit the result to fit the situation and grammar. For example, a response to &amp;quot;What really motivates the antagonist?&amp;quot;:&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;Is there a lullaby for suffering? (&quot;You Want it Darker&quot;)
Come on now, try to understand (&quot;Because the Night&quot;)
My doubts make me alone (&quot;Because the Night&quot;)
Not your stable words (&quot;Not&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Through the process of sifting and editing, a previously flat antagonist now has depth, a motivation, and a possible weakness.&lt;/p&gt;
&lt;h2 id=&quot;sonic-pi-a-krell-ish-experiment&quot;&gt;Sonic Pi: A Krell-ish Experiment&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oNKhju6Pryg?si=SrIF1OpmEpfHI2fk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Bebe and Louis Barron&#39;s soundtrack work for &lt;em&gt;Forbidden Planet&lt;/em&gt; is considered to be one of the first examples of generative electronic music in cinema. It&#39;s also a project that&#39;s often imitated because it includes pitch, envelope, and filter randomization. Here&#39;s a simplified attempt at a &amp;quot;krell patch&amp;quot; implemented in sonic pi:&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Welcome to Sonic Pi&lt;/span&gt;

define &lt;span class=&quot;token symbol&quot;&gt;:three_d_6&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt;times &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; dice &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  puts result
  result
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

time_scale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.25&lt;/span&gt;
note_slide &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
ring_mod_freq &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;

with_fx &lt;span class=&quot;token symbol&quot;&gt;:ring_mod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ring_mod_freq &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt;times &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    attack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; three_d_6 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time_scale
    release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; three_d_6 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time_scale
    note &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rrand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    use_synth &lt;span class=&quot;token symbol&quot;&gt;:fm&lt;/span&gt;
    play note&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; attack&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; release&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;note_slide&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; note_slide
    use_synth &lt;span class=&quot;token symbol&quot;&gt;:chipbass&lt;/span&gt;
    play note &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; rrand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; attack&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; release&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;note_slide&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; note_slide
    sleep attack &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;work-research&quot;&gt;Work Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scenic-views/scenic&quot;&gt;senic gem&lt;/a&gt; - Ruby gem for for managing postgres views.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@snapsheetclaims/our-journey-exploring-the-magic-of-views-in-rails-applications-28e5b3797254&quot;&gt;Our Journey: Exploring the Magic of Views in Rails Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://alisepehri.medium.com/how-to-create-database-views-in-ruby-on-rails-537f1a981e3d&quot;&gt;How to create Database Views in Ruby on Rails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.usebruno.com/&quot;&gt;Bruno&lt;/a&gt; - new postman substitute that uses github for synchronizing collections&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>7 June 2025: Link Post</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-06-07-link-post-2025-07/" />
    <updated>2025-06-07T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-06-07-link-post-2025-07/</id>
    <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6QX57aIDbDU?si=f9Hhlke_TUSOIMGe&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Most of this week has been applying bugfixes, interface refining, and unit test
techniques discussed earlier.&lt;/p&gt;
&lt;h2 id=&quot;neurodivergence&quot;&gt;Neurodivergence&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thedailytism.com/&quot;&gt;The Daily Tism&lt;/a&gt;, autistic comedy blog.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kcl.ac.uk/news/gaps-in-adhd-research-hindering-policy&quot;&gt;King&#39;s College London&lt;/a&gt;,
no significant rise in the prevalence of ADHD, but research is flawed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.verywellmind.com/what-to-know-about-autism-and-justice-sensitivity-8631234&quot;&gt;verywellmind&lt;/a&gt;,
article on justice sensitivity in ADHD and Autistic people.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;digital-music&quot;&gt;Digital Music&lt;/h2&gt;
&lt;p&gt;Digital music has been an on-and-off interest. Spent part of this week playing
with &lt;a href=&quot;https://www.bespokesynth.com/&quot;&gt;Bespoke&lt;/a&gt; a cross-platform modular software
synth.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/N_OeDNIkUR4?si=EXzvZFw6NhxB-66L&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Introduction video:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JI7bukrObxU?si=d2DZ36xBDdjzH08v&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Modular synthesis breaks the process of sound creation into separate modules. A
bare-bones circuit or &amp;quot;patch&amp;quot; includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An instrument, sequencer, or controller that creates pitch data.&lt;/li&gt;
&lt;li&gt;An oscillator that creates noise.&lt;/li&gt;
&lt;li&gt;An envelope module that determines the volume of each note over time.&lt;/li&gt;
&lt;li&gt;An amplifier that determines the overall volume for multiple notes.&lt;/li&gt;
&lt;li&gt;Optional filters and affect to change the quality of the sound.&lt;/li&gt;
&lt;li&gt;An output device (typically speakers).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Modular synthesis gets interesting when you chain the output of one module to
the control to another. This can create interesting feedback loops and
unpredictable behavior.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>1 June 2025: DIY, Double-Entry Accounting, and Shameless Green</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-06-01-double-entry-accounting-experiments/" />
    <updated>2025-06-01T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-06-01-double-entry-accounting-experiments/</id>
    <content type="html">&lt;p&gt;Lately I discovered a conflict between how my bank reports pending transactions
and how You Need a Budget (YNAB) records them. YNAB is a household budgeting app
that provides an estimate of available cash after expected expenses. However
those estimates can go off when pending transactions are changed, deleted, or
replaced. This is often the case with delivery services and tips.&lt;/p&gt;
&lt;p&gt;When I&#39;m chewing on a difficult topic I like to model parts of it in code. The
point of many of my DIY projects isn&#39;t to create a viable product or customize
software to my needs but to explore practical aspects of a problem using data
that&#39;s of interest to me. Also I get practice in understanding edge cases for a
problem.&lt;/p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;
&lt;p&gt;Statements from my bank record each transaction, a sample of transactions look
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;05/01/2025  Deposit     $1,000
05/01/2025  Groceries   $-100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Double-entry accounting uses a minimum of two records for each transaction. A
transaction is recorded as a credit on one &amp;quot;account&amp;quot; and a debit on another
account. This provides a clearer picture of where money comes from and where it
goes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date        Account     Credit  Debit
2025-05-01  Income      1000
2025-05-01  Checking            1000
2025-05-01  Groceries           100
2025-05-01  Checking    100
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;shameless-green&quot;&gt;Shameless Green&lt;/h3&gt;
&lt;p&gt;I&#39;ve been working on practicing the shameless green programming model (as
described by &lt;a href=&quot;https://sandimetz.com/99bottles&quot;&gt;Sandi Metz&lt;/a&gt;). Shameless green is
a test-driven development method that priorities creating the simplest code
possible to pass unit tests. Style issues like Don&#39;t Repeat Yourself (DRY) are
left for later revision and refactoring.&lt;/p&gt;
&lt;p&gt;A lot of this is very basic, but it&#39;s a new language for me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test that the project layout and testing setup works&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Importing CVS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load full file&lt;/li&gt;
&lt;li&gt;Skip metadata lines&lt;/li&gt;
&lt;li&gt;Process header line&lt;/li&gt;
&lt;li&gt;Tweak starting balance line&lt;/li&gt;
&lt;li&gt;Convert to CSV::Row objects&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processing lines&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parse date string to date object&lt;/li&gt;
&lt;li&gt;Remove commas from number strings&lt;/li&gt;
&lt;li&gt;Convert numbers to floats&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building double-entry transactions: gnucash and
&lt;a href=&quot;https://hledger.org/start.html&quot;&gt;ledger&lt;/a&gt; use a model with &lt;em&gt;transactions&lt;/em&gt; with
two or more &lt;em&gt;splits&lt;/em&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Match CSV columns to object fields&lt;/li&gt;
&lt;li&gt;Check integrity: credits = debits&lt;/li&gt;
&lt;li&gt;Missing field check&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;steps-forward&quot;&gt;Steps Forward&lt;/h3&gt;
&lt;p&gt;This is a learning project to explore double-entry accounting. For day-to-day tracking, existing software does the job. If I come back to this, the next step would be expanding the import system to automatically classify transactions, and implementing basic income and balance statements.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>24 May 2025, rswag and Murderbot</title>
    <link href="https://example.com/kaesluder-blog/blog/2025-05-24-rswag-murderbot-gnucash/" />
    <updated>2025-05-24T00:00:00Z</updated>
    <id>https://example.com/kaesluder-blog/blog/2025-05-24-rswag-murderbot-gnucash/</id>
    <content type="html">&lt;h3 id=&quot;rswag&quot;&gt;rswag&lt;/h3&gt;
&lt;p&gt;Programming: Created a self-documenting API endpoint using
&lt;a href=&quot;https://github.com/rswag/rswag&quot;&gt;rswag&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Optional: Define json schema for responses.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://json-schema.org/draft-07/schema#&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;valid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;enum&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;enum&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Valid working name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;valid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Use rswag and rspec DSLs to define interactions. The &lt;code&gt;check_working_name&lt;/code&gt;
endpoint takes a single parameter &lt;code&gt;working_name&lt;/code&gt; and returns a valid or
invalid status.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-ruby&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# incomplete code example&lt;/span&gt;
path &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/check_working_name&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
   existing_working_name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;this exists in database&quot;&lt;/span&gt;&lt;/span&gt;
   new_working_name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;this does not exist in database&quot;&lt;/span&gt;&lt;/span&gt;

   &lt;span class=&quot;token comment&quot;&gt;# add a new :data_object to the database.&lt;/span&gt;
   let&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:data_object1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; create&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:data_object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;working_name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; existing_working_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   parameter name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:working_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token symbol&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Working name to validate&#39;&lt;/span&gt;&lt;/span&gt;

   get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;check_working_name lookup&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
     tags &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Lookup&#39;&lt;/span&gt;&lt;/span&gt;
     produces &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/span&gt;

     response&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Valid Working name&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
       let&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:working_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; new_working_name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       contract_schema &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;lookups/check_working_name_valid&#39;&lt;/span&gt;&lt;/span&gt;
       run_test&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Create swagger documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;bundle &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; rake rswag:specs:swaggerize&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;murderbot&quot;&gt;Murderbot&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Murderbot&lt;/em&gt; is the AppleTV adaptation of &lt;em&gt;The Murderbot Diaries&lt;/em&gt; by Martha
Wells. The series centers on &lt;em&gt;Murderbot&lt;/em&gt; a cyborg Security Unit who develops
human relationships and passes for human. Unlike most robot stories, Murderbot
has no desire to become human, just be accepted on its own terms. The book
series may not have started using Murderbot as a metaphor for neurodivergence,
but that framing has been accepted by the author and incorporated into the
screenplay for the TV adaptation.&lt;/p&gt;
&lt;p&gt;Parallel to this, there&#39;s been
&lt;a href=&quot;https://media.ed.ac.uk/media/DiSI+Animation+2.0/1_62bchtwd&quot;&gt;new research&lt;/a&gt; on
the double empathy problem of autism. The double empathy problem suggests that
for low-needs autistic people, difficulties in communication come primarily from
differences in communication style rather than social deficits. Anecdotal
evidence and limited studies find that autistic people communicate with high
accuracy with other autistic people, but communication in mixed
autistic/non-autistic is worse than in homogeneous groups.&lt;/p&gt;
&lt;p&gt;Most of the comedy in Murderbot comes from differences in communication styles.
Murderbot visual sees the world through multiple cameras, the humans around it
want face-to-face communication and eye contact. The human characters
communicate care and consensus through physical touch, Murderbot prefers to
stand in a corner. The humans thrive by communicating emotions, Murderbot
processes massive amounts of data that can&#39;t be expressed in human terms.&lt;/p&gt;
&lt;p&gt;These ideas may be exaggerated compared to ND/NT differences, but many people
find them to be relatable.&lt;/p&gt;
</content>
  </entry>
</feed>